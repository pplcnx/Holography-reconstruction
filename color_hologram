import sys
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image


def angular_spectrum(field, wavelength, distance, pixel_size):
    """Propagate a field using the angular spectrum method."""
    k = 2 * np.pi / wavelength
    n, m = field.shape
    fx = np.fft.fftfreq(m, d=pixel_size)
    fy = np.fft.fftfreq(n, d=pixel_size)
    FX, FY = np.meshgrid(fx, fy)
    H = np.exp(1j * distance * np.sqrt(np.maximum(0, k**2 - (2 * np.pi * FX)**2 - (2 * np.pi * FY)**2)))
    F = np.fft.fft2(field)
    return np.fft.ifft2(F * H)


def main(image_path):
    # Wavelengths for R, G, B channels
    wavelengths = [633e-9, 532e-9, 473e-9]
    pixel_size = 3.6e-6
    distance = 0.2

    img = np.array(Image.open(image_path).convert("RGB"), dtype=np.float32) / 255.0
    h, w, _ = img.shape

    hologram_phases = []
    recon_channels = []
    for ch in range(3):
        target_amp = img[:, :, ch]
        target_field = target_amp * np.exp(1j * 0)
        field_slm = angular_spectrum(target_field, wavelengths[ch], -distance, pixel_size)
        phase = np.angle(field_slm)
        hologram_phases.append(phase)
        hologram = np.exp(1j * phase)
        recon = angular_spectrum(hologram, wavelengths[ch], distance, pixel_size)
        recon_channels.append(np.abs(recon))

    reconstructed = np.dstack(recon_channels)
    reconstructed /= reconstructed.max()

    fig, axs = plt.subplots(1, 3, figsize=(12, 4))
    axs[0].imshow(img)
    axs[0].set_title('Original Image')
    axs[0].axis('off')

    axs[1].imshow(hologram_phases[0], cmap='gray')
    axs[1].set_title('Hologram Phase (R)')
    axs[1].axis('off')

    axs[2].imshow(reconstructed)
    axs[2].set_title('Reconstructed Image')
    axs[2].axis('off')

    plt.tight_layout()
    plt.show()


if __name__ == "__main__":
    if len(sys.argv) > 1:
        img_path = sys.argv[1]
    else:
        img_path = 'input.jpg'
    main(img_path)
